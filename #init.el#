(require 'package)

 

(add-to-list 'package-archives
             '("tromey" . "http://tromey.com/elpa/") t)
(add-to-list 'package-archives
             '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/") t)

(package-initialize)
(setq package-enable-at-startup nil)

(set-face-attribute 'default nil :family "Fira Mono Medium")
(set-face-attribute 'default nil :height 155)


;; zenburn

(unless (package-installed-p 'zenburn-theme)
  (package-install 'zenburn-theme))

(load-theme 'zenburn t)

;; undo-tree

(unless (package-installed-p 'undo-tree)
  (package-install 'undo-tree))

(global-undo-tree-mode)


;; ivy

(unless (package-installed-p 'ivy)
  (package-install 'ivy))

(require 'ivy)
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d ")

;; smex

(unless (package-installed-p 'smex)
  (package-install 'smex))

(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;; projectile

(unless (package-installed-p 'projectile)
  (package-install 'projectile))
;;use package
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'projectile)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(setq projectile-completion-system 'ivy)
(projectile-mode +1)

;; magit

(unless (package-installed-p 'magit)
  (package-install 'magit))

(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch)

;; swiper
(unless (package-installed-p 'swiper)
  (package-install 'swiper))
(use-package swiper
:ensure try
:config
(progn
(global-set-key "\C-s" 'swiper)))


;; flycheck

(unless (package-installed-p 'flycheck)
  (package-install 'flycheck))

;; rainbow-delimiters
(unless (package-installed-p 'rainbow-delimiters)
  (package-install 'rainbow-delimiters))


;; company-mode

(unless (package-installed-p 'company)
  (package-install 'company))

(global-company-mode)
(setq company-idle-delay nil)
(global-set-key (kbd "M-TAB") #'company-complete)
(global-set-key (kbd "TAB") #'company-indent-or-complete-common)

;; ace-mode

(unless (package-installed-p 'ace-window)
  (package-install 'ace-window))
(use-package ace-window
:ensure t
:init
(progn
(global-set-key [remap other-window] 'ace-window)
(custom-set-faces
'(aw-leading-char-face
((t (:inherit ace-jump-face-foreground :height 3.0)))))
))

(unless (package-installed-p 'smartparens)
  (package-install 'smartparens))

(use-package smartparens-config
  :ensure smartparens
  :config (progn (show-smartparens-global-mode t)))

;;(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
;;(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)

;; clojure-mode


(unless (package-installed-p 'clojure-mode)
  (package-install 'clojure-mode)
  (package-install 'clojure-mode-extra-font-locking))

(require 'clojure-mode-extra-font-locking)

(add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
;;(add-hook 'clojure-mode-hook #'subword-mode)
(add-hook 'clojure-mode-hook #'smartparens-strict-mode)
;;(add-hook 'clojure-mode-hook #'aggressive-indent-mode)
(add-to-list 'auto-mode-alist '("\\.clj\\'" . clojure-mode))

;; cider

(unless (package-installed-p 'cider)
  (package-install 'cider))

;;(add-hook 'cider-repl-mode-hook #'subword-mode)
;;(add-hook 'cider-repl-mode-hook #'smartparens-strict-mode)
(add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
;;(add-hook 'cider-repl-mode-hook #'aggressive-indent-mode)
;;(add-hook 'cider-repl-mode-hook #'company-mode)
;;(add-hook 'cider-mode-hook #'company-mode)

(setq cider-repl-wrap-history t)
(setq cider-repl-history-file "~/.emacs.d/cider-history")
(setq cider-save-file-on-load t)
(setq cider-font-lock-dynamically '(macro core function var))

;; clj-refactor

(unless (package-installed-p 'clj-refactor)
  (package-install 'clj-refactor))

(require 'clj-refactor)

(defun clj-ref-clojure-mode-hook ()
  (clj-refactor-mode 1)
  (yas-minor-mode 1))

(add-hook 'clojure-mode-hook #'clj-ref-clojure-mode-hook)

;; flycheck-clj-kondo

(unless (package-installed-p 'flycheck-clj-kondo)
  (package-install 'flycheck-clj-kondo))

(require 'flycheck-clj-kondo)

;; which-key

(unless (package-installed-p 'which-key)
  (package-install 'which-key))

(which-key-mode)


(unless (package-installed-p 'smart-mode-line)
  (package-install 'smart-mode-line))




;; editing

(show-paren-mode 1)
(global-hl-line-mode 1)
(setq ring-bell-function 'ignore)
(fset 'yes-or-no-p 'y-or-n-p)
(setq create-lockfiles nil)
(tool-bar-mode -1)
(menu-bar-mode -1)
(define-key ctl-x-map "\C-z" 'view-mode)
(setq sml/no-confirm-load-theme t)
(setq sml/theme 'dark)
(sml/setup)

;;(global-set-key (kbd "C-s") 'isearch-forward-regexp)
;;(global-set-key (kbd "C-r") 'isearch-backward-regexp)
;;(global-set-key (kbd "C-M-s") 'isearch-forward)
;;(global-set-key (kbd "C-M-r") 'isearch-backward)


;;(add-hook 'after-load-functions '(view-mode t))

;(add-hook 'view-mode-hook (lambda() 
;(setq sml/theme 'dark)
;(sml/setup)

					;))

(setq linum-format "%5d â”‚ ")

(defun my-linum-mode-hook ()
  (linum-mode t))

(add-hook 'find-file-hook 'my-linum-mode-hook)


;; key bindings for smartparens
(defmacro def-pairs (pairs)
  "Define functions for pairing. PAIRS is an alist of (NAME . STRING)
conses, where NAME is the function name that will be created and
STRING is a single-character string that marks the opening character.

  (def-pairs ((paren . \"(\")
              (bracket . \"[\"))

defines the functions WRAP-WITH-PAREN and WRAP-WITH-BRACKET,
respectively."
  `(progn
     ,@(loop for (key . val) in pairs
             collect
             `(defun ,(read (concat
                             "wrap-with-"
                             (prin1-to-string key)
                             "s"))
                  (&optional arg)
                (interactive "p")
                (sp-wrap-with-pair ,val)))))

(def-pairs ((paren . "(")
            (bracket . "[")
            (brace . "{")
            (single-quote . "'")
            (double-quote . "\"")
            (back-quote . "`")))

(bind-keys
 :map smartparens-mode-map
 ("C-M-a" . sp-beginning-of-sexp)
 ("C-M-e" . sp-end-of-sexp)

 ("C-<down>" . sp-down-sexp)
 ("C-<up>"   . sp-up-sexp)
 ("M-<down>" . sp-backward-down-sexp)
 ("M-<up>"   . sp-backward-up-sexp)

 ("C-M-f" . sp-forward-sexp)
 ("C-M-b" . sp-backward-sexp)

 ("C-M-n" . sp-next-sexp)
 ("C-M-p" . sp-previous-sexp)

 ("C-S-f" . sp-forward-symbol)
 ("C-S-b" . sp-backward-symbol)

 ("C-<right>" . sp-forward-slurp-sexp)
 ("M-<right>" . sp-forward-barf-sexp)
 ("C-<left>"  . sp-backward-slurp-sexp)
 ("M-<left>"  . sp-backward-barf-sexp)

 ("C-M-t" . sp-transpose-sexp)
 ("C-M-k" . sp-kill-sexp)
 ("C-k"   . sp-kill-hybrid-sexp)
 ("M-k"   . sp-backward-kill-sexp)
 ("C-M-w" . sp-copy-sexp)
 ("C-M-d" . delete-sexp)

 ("M-<backspace>" . backward-kill-word)
 ("C-<backspace>" . sp-backward-kill-word)
 ([remap sp-backward-kill-word] . backward-kill-word)

 ("M-[" . sp-backward-unwrap-sexp)
 ("M-]" . sp-unwrap-sexp)

 ("C-x C-t" . sp-transpose-hybrid-sexp)

 ("C-c ("  . wrap-with-parens)
 ("C-c ["  . wrap-with-brackets)
 ("C-c {"  . wrap-with-braces)
 ("C-c '"  . wrap-with-single-quotes)
 ("C-c \"" . wrap-with-double-quotes)
 ("C-c _"  . wrap-with-underscores)
 ("C-c `"  . wrap-with-back-quotes))

